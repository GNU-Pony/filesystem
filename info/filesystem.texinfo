\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename filesystem.info
@settitle filesystem
@afourpaper
@documentencoding UTF-8
@documentlanguage en
@finalout
@c %**end of header


@copying
Copyright @copyright{} 2013 Mattias Andrée

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@node Top
@top filesystem -- Filesystem hierarchy implementation for GNU/Pony
@insertcopying
@end ifnottex

@titlepage
@title filesystem
@subtitle Filesystem hierarchy implementation for GNU/Pony
@author by Mattias Andrée (maandree)

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents



@menu
* Overview::                        Brief overview of @command{filesystem}.
* Foundamental hierarchy::          The foundamental part of the hierarchy.
* Interface hierarchy::             The advanced programming interface part of the hierarchy.
* Settings hierarchy::              The settings part of the hierarchy.
* Variable data hierarchy::         The variable data part of the hierarchy.
* Primary hierarchy::               The primary application hierarchy part of the hierarchy.
@c* Secondary hierarchy::             The secondary application hierarchy part of the hierarchy.
@c* Tertiary hierarchy::              The tertiary application hierarchy part of the hierarchy.
* GNU Free Documentation License::  Copying and sharing this manual.
@end menu



@node Overview
@chapter Overview

@command{filesystem} is a system base package that provides a implementation
of a filesystem hierarchy by creating directories and symbolic directories,
as well as providing files required for a system run but is not owned by any
other package.

@command{filesystem} also specifies directory permissions and ownerships so
other packages can be agnostic and not implement this themself.

The filesystem hierarchy is based on the Filesystem Hierarchy Standard developed
by the Linux Foundation.



@node Foundamental hierarchy
@chapter Foundamental hierarchy

@menu
* /::                               The root if it all.
* lost+found::                      The orphanage.
* /mnt::                            Temporarily mounted filesystem.
* /media::                          Removable media.
* /root::                           Administrator directory.
* /home::                           User directories.
* /info::                           Administrated shared files.
* /share::                          User shared data.
@end menu



@node /
@section @file{/}

@file{/} is top-most directory, there is a parition mounted on it, and it
is a very you ultimately find everything, even other paritions.

@file{/} is called ``root'', which may cause confusion is try to call it
@file{/} when possible or even ``slash'' if things get really confusing.



@node lost+found
@section @file{lost+found}

@file{lost+found} (`''lost and found'') is a directory create by most
filesystems, and you may find one at any mount point@footnote{A directory
onto which a file system is mounted}, including @file{/lost+found},
@file{/mnt/lost+found} and @file{/media/*/lost+found}.

When a filesystem finds an orphaned inode, that is, a file without any
known file names, it may put it in its @file{lost+found}

If you do not which to this file in your removable devices, you can
normally, depending on your file manager, add a file named @file{.hidden}
(the perfix dot means that it will be hidden) containing a line
with the text @code{lost+found}, in the device's mount point.



@node /mnt
@section @file{/mnt}

@file{/mnt} (``mount'') is a directory that is just there for your convience,
it is intended to be used as a mount point for a file system, normally
a removable device, that you are working with temporarly, and is not intended
to be mounted long term.



@node /media
@section @file{/media}

@file{/media} as a superdirectory of long term mount points,
more specifically, it is intended to only contain directories that are
used as mount points for long term mounted filesystems that is not
incorporated into the remaining part of the filesystem hierarchy.

For example, if you have an external drive named ``oggcasts'', you
can create the directory @file{/media/oggcasts}, onto which you mount
the partion you have on the ``oggcast'' drive.

It is also intended for use of optical storage, floppy drives, zip
drived and alike, if you are still using any of those.



@node /root
@section @file{/root}

@file{/root} (``root'' or ``slash root'') is the home directory for the
system administrator, the user @code{root}. Normally there is no much
point to have a home directory for the system administrator as that is
not any user intended for use beyond administrations. However, it will
contian application configurations if the user chooses to have any, and
can also be used to store files needed for administration, that you
do not want to be clutter up your non-root user home directory.

Theoretically it is possile to symlink @file{/root} to your user home
directory so you do not need to separately configure the root user.
This paractice is however unrecommended, as messing up your user could
potentially mess up the root user as well; rather, you should keep
your root configurations as safe and minimalisic as possible.



@node /home
@section @file{/home}

@file{/home} (``home'' or ``slash home'') is the default superdirectory
for non-root user home directories. When you create a new user, if not
otherwise specified, the new user, named @code{zyzzx}, will be created
a the directory @file{/home/zyzzx} which will be set to @code{zyzzx}'s
home directory and only @code{zyzzx} and root will have access to it.



@node /info
@section @file{/info}

@file{/info} (``info'' or ``information'') is a GNU/Pony extension to
the filesystem hierarchy inspired by the filesystem hierarchy found at
the Royal Insitute of Technology.

By default only root have write access to @file{/info}, but you may want
to change the group to @code{faculty} (or similarily) and give write
access to the group.

@file{/info} is intended for privileged users to publish files, and is
thus fairly unneccessary for single user computers unless you give your
friends SFTP access.



@node /share
@section @file{/share}

@file{/share} (``sharing is magic'')@footnote{Or ``slash share'' or just
``share''} is a GNU/Pony extension to the filesystem hierarchy. It is intended
for user shared files. While users are recommended to create a directory
@file{~/Public} and give everypony read access to it, and store personal
non-private files in it for other ponies to read or canabalise, @file{/share}
is intended for all users to use together for non-personal data, for example,
you can put your radio shows, music, books or whatever, there.



@node Interface hierarchy
@chapter Interface hierarchy

@menu
* /dev::                            Devices and pseudodevices.
* /dev/pts::                        Pseudoterminals.
* /dev/shm::                        Shared memory.
* /proc::                           Process information.
* /run::                            Run-time variable data.
* /sys::                            System access.
@end menu


@node /dev
@section @file{/dev}

@file{/dev} is a mount point for the kernel advanced programming interface
filesystem for devices and pseudodevices.


@node /dev/pts
@section @file{/dev/pts}

@file{/dev/pts} is a mount point for the kernel advanced programming
interface filesystem for pseudoterminals.


@node /dev/shm
@section @file{/dev/shm}

@file{/dev/shm} is a mount point for the kernel advanced programming
interface filesystem for shared memory, but can also be used as a
directory for temporary files that will always be in random access memory.


@node /proc
@section @file{/proc}

@file{/proc} is a mount point for the kernel advanced programming interface
filesystem for information about processes. It does contain some miscellany,
but it also cotains one directory for each process named as the process ID
as well as one special symlink, named @file{/proc/self} pointing to the
directory for the current process.


@node /run
@section @file{/run}

@file{/run} is a mount point for the advanced programming interface
filesystem for run-time variable data. It contains system information
describing the system since it was booted. Programs may have subdirectories;
process identifiers and UNIX-domain sockets used by programs should be
placed in this file system.


@node /sys
@section @file{/sys}

@file{/sys} is a mount point for the kernel advanced programming interface
filesystem for kernel and hardware access and modification.



@node Settings hierarchy
@chapter Settings hierarchy

@menu
* /boot::                           The boot partition.
* /etc::                            Host-specific settings.
* /etc/opt::                        Host-specific settings for @file{/opt}.
* /etc/skel::                       User skeleton.
@end menu


@node /boot
@section @file{/boot}

@file{/boot} is the mount point for the partition that the bootmanager starts
and contains the bootloader that boots an operativing system.

@file{/boot} contains all bootable kernels and initramfs:es that are not
booted by a chainloaded bootloaders; it also contains settings for your
bootloader and tools your can run, instead of your operativing system,
for diagnositics.


@node /etc
@section @file{/etc}

@file{/etc} (pronounced however you wish) the directory for system-wide
host-specific configurations.


@node /etc/opt
@section @file{/etc/opt}

@file{/etc/opt} the directory for system-wide host-specific configurations
for programs installed to @file{/opt}.


@node /etc/skel
@section @file{/etc/skel}

@file{/etc/skel} is the user home directory skeletion (prototype), that
is copyed to new users when they are created.



@node Variable data hierarchy
@chapter Variable data hierarchy

@menu
* /srv::                            Service data.
* /srv/db::                         Database data.
* /srv/ftp::                        FTP files.
* /srv/http::                       WWW files.
* /tmp::                            Transient temporary files.
* /var::                            Variable data.
* /var/tmp::                        Persistent temporary files.
* /var/cache::                      Cached files.
* /var/spool::                      Spooled files.
* /var/opt::                        Variable data for @file{/opt}.
* /var/log::                        System log files.
* /var/mail::                       User e-mail.
* /var/games::                      Variable game data.
* /var/lock::                       Unsharable lock data.
* /var/lib::                        State information.
* /var/local::                      Variable data for @file{/usr/local}.
* /var/empty::                      Empty directory.
* /run/lock::                       Transient unsharable lock data.
@end menu


@node /srv
@section @file{/srv}

@file{/srv} is a superdirectory for data provided by services hosted
on the machine.


@node /srv/db
@section @file{/srv/db}

@file{/srv/db} is a directory for data provided by databases hosted
on the machine. @file{/srv/db} should not directly contain database
data, but rather a directory named as the service, that in turn contians
the database files.


@node /srv/ftp
@section @file{/srv/ftp}

@file{/srv/db} is the directory for files provided by a FTP server
on the machine.


@node /srv/http
@section @file{/srv/http}

@file{/srv/http} is the directory for files provided by a HTTP server
on the machine.


@node /tmp
@section @file{/tmp}

@file{/tmp} is the directory for temporary files stored primarly in
the random access memory, but could potentially also be stored on
a swap partition.


@node /var
@section @file{/var}

@file{/var} is root directory for variable data outside @file{/srv}
and @file{/tmp}.


@node /var/tmp
@section @file{/var/tmp}

@file{/var/tmp} is the directory for temporary files stored on the
drive and will be preserved between system boots.


@node /var/cache
@section @file{/var/cache}

@file{/var/cached} is the directory cached files, that is temporary
files used by a program, but can be removed at any time.


@node /var/spool
@section @file{/var/spool}

@file{/var/cached} is the directory spool files, that is temporary files
used by a program, but cannot safely be removed and will be removed by
the program when it is no longer needed.


@node /var/opt
@section @file{/var/opt}

@file{/var/opt} is the directory file variable data for programs located
in @file{/opt} and should be arranged in the same when. The program
may arrange the data in its directory as it wish, but is recommended to
arrange it in the same way as @file{/var} is arranged.


@node /var/log
@section @file{/var/log}

@file{/var/log} is the directory of system logs.


@node /var/mail
@section @file{/var/mail}

@file{/var/mail} is the directory of user e-mail fetched by a e-mail
service.


@node /var/games
@section @file{/var/games}

@file{/var/games} is the directory of variable game data, such as
high scores.


@node /var/lock
@section @file{/var/lock}

@file{/var/lock} is the directory of file locks, if you want the
locks be cleared at reboot it fits better in @file{/run/lock}.


@node /var/lib
@section @file{/var/lib}

@file{/var/lib} is the directory of program and system state data.


@node /var/local
@section @file{/var/local}

@file{/var/local} is the @file{/var} directory of programs located
in @file{/usr/local}, contains the analogous directories @file{cache},
@file{spool}, @file{games}, @file{lock} and @file{lib}.


@node /var/empty
@section @file{/var/empty}

@file{/var/empty} is a directory that should be empty, that services
can @command{chroot} instances into to hide the file system.


@node /run/lock
@section @file{/run/lock}

@file{/run/lock} is just like @file{/var/lock}, except the lock files
will be cleared at reboot.



@node Primary hierarchy
@chapter Primary hierarchy

@menu
* /bin::                            Essential command.
* /sbin::                           Essential system binaries.
* /lib::                            Essential shared libraries and kernel modules.
* /opt::                            Self-contained and add-on packages.
@end menu



@node /bin
@section @file{/bin}

@file{/bin} is the directory for commands needed for system maintenance.
This does include command you will use regulary everyday, but not all of
them, just the ones you would also need for normal system maintenance
and rescue.



@node /sbin
@section @file{/sbin}

@file{/sbin} is the directory for essential binaries used system modifications
and interaction. While @file{bin} directories contains normal everyday commands,
@file{sbin} directories contains commands normally used by the system initialisation,
but primarly system daemons, commands for hardware and system setup, and similar
commands, take a peek in for a better understanding.



@node /lib
@section @file{/lib}

@file{/lib} is the directory for libraries used by commands in @file{/bin} and
@file{/sbin}, but is also contains executable non-commands used by those commands,
that is, commands that are intended for use by other commands and not directly by
a user. Furthermore, it contains kernel modules, which could be argued to be
located in @file{/opt}, so do not be surpriced if you find them there one day,
but fore the time being, they are considered libraries rather than add-ons.

On x86_64 systems you will find @file{/lib64} which pointes to @file{/lib}.
As @file{/lib} is architecture dependent it makes no sinces to create a seperate
directory for that architecture, therefore @file{/lib64} is created to link
to @file{/lib} so programs do not install them to any other directory then @file{/lib}.



@node /opt
@section @file{/opt}

@file{/opt} (from `optional') is a directory of large self-contained packages, that
contains their own library copies; problematic packages, that do not comform to a
standard filesystem hierarchy or need their of library copies for compatiblity reasons;
application add-ons; and compat versions of packages, that is, another version
(version number) of a that is installed side by side with the mane verison.




@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texinfo

@bye

